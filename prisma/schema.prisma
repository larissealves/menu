generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dish {
  id          Int              @id @default(autoincrement())
  name        String
  price       Float
  description String
  categoryId  Int
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  category    Category         @relation(fields: [categoryId], references: [id])
  images      DishImage[]
  ingredients DishIngredient[] @relation("DishToDishIngredients")
  tags        DishTag[]        @relation("DishToDishTags")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  dishes    Dish[]
}

model Ingredient {
  id        Int              @id @default(autoincrement())
  name      String
  isActive  Boolean          @default(true)
  updatedAt DateTime         @updatedAt
  createdAt DateTime         @default(now())
  dishes    DishIngredient[]
}

model DishIngredient {
  id           Int        @id @default(autoincrement())
  dishId       Int
  ingredientId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  dish         Dish       @relation("DishToDishIngredients", fields: [dishId], references: [id])
}

model DishImage {
  id          Int              @id @default(autoincrement())
  dishId      Int
  imageUrl    String
  imageName   String
  imageType   String
  isPrimary   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  dish        Dish             @relation(fields: [dishId], references: [id])
  imageBinary DishImageBinary?
}

model DishImageBinary {
  id          Int       @id @default(autoincrement())
  dishImageId Int       @unique
  binaryData  Bytes
  dishImage   DishImage @relation(fields: [dishImageId], references: [id])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  isActive  Boolean   @default(true)
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  dishes    DishTag[]
}

model DishTag {
  id        Int      @id @default(autoincrement())
  dishId    Int
  tagId     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tag       Tag      @relation(fields: [tagId], references: [id])
  dish      Dish     @relation("DishToDishTags", fields: [dishId], references: [id])
}
